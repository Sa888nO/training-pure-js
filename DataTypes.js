// объекты обертки для примитивов - String/Number/Boolean
// они создаются в момент использования метода примитива например:
str.toUpperCase();

/* ЧИСЛА */

// ускорение записи больших чисел используя "e"
let billion = 1e9; // 1 миллиард, буквально: 1 и 9 нулей
alert(7.3e9); // 7.3 миллиардов (7,300,000,000)
let ms = 1e-6; // шесть нулей, слева от 1
// "e" производит операцию умножения числа на 1 с указанным количеством нулей.

// Преобразование к строке
num.toString(base); // base - система счисления, если ничего то 10ая
// Использование не числе реализуется через ..
(123456).toString(36);

// Округление:
// 1) Math.floor (в меньшую сторону) 3.1 — 3, а -1.1 — -2
// 2) Math.ceil (в большую сторону) 3.1 — 4, а -1.1 — -1
// 3) Math.round (до ближайшего целого) 3.1 — 3, 3.6 — 4, а -1.1 — -1
// 4) Math.trunc (не поддерживается в Internet Explorer) 3.1 — 3, а -1.1 — -1
// * toFixed(n) * (округление до n знаков посля запятой) возв строку округление по типу M.round

// Неточные вычисления
alert(0.1 + 0.2 == 0.3); // false
alert(0.1 + 0.2); // 0.30000000000000004
// надёжный способ решения — это округлить результат используя метод toFixed(n):

// isNaN(value) преобразует значение в число и проверяет является ли оно NaN
alert(isNaN(NaN)); // true
alert(isNaN("str")); // true
// isFinite(value) преобразует аргумент в число и возвращает true, если оно не NaN/Infinity/-Infinity
alert(isFinite("15")); // true
alert(isFinite("str")); // false, потому что специальное значение: NaN
alert(isFinite(Infinity)); // false, потому что специальное значение: Infinity

// преобразование к строки к числу parseInt() и parseFloat()
// Они «читают» число из строки.
// Если в процессе чтения возникает ошибка, они возвращают полученное до ошибки число.
alert(parseInt("100px")); // 100
alert(parseFloat("12.5em")); // 12.5
alert(parseInt("12.3")); // 12, вернётся только целая часть
alert(parseFloat("12.3.4")); // 12.3, произойдёт остановка чтения на второй точке
// Функции parseInt/parseFloat вернут NaN, если не смогли прочитать ни одну цифру
alert(parseInt("a123"));

// Math.random()
// Возвращает псевдослучайное число в диапазоне от 0 (включительно) до 1 (но не включая 1)

/* СТРОКИ */

//длина строки - свойство length !без круглых скобок!
str.length;
// получить символ отдельно можно с помощью [pos]/.charAt(pos) - "" если нет (лучше юзать [] но если нет undefined )
// перебрать строку по символам можно с помощью for of
for (let char of "Hello") {
  alert(char);
}
// изменить регистр toLowerCase() и toUpperCase()
// поиск вхождения подстроки str.indexOf(substr) - первое / str.lastIndexOf(substr) - последнее
// возвращают позицию или -1 если ничего не найдено
// includes, startsWith, endsWith проверяют вхождение/начинается/заканчивается строкой возвращает true/false
// получение подстроки substring и slice
// str.slice(start [, end]) - Возвращает часть строки от start до (не включая) end :
str.slice(0, 5);
// str.trim() — убирает пробелы в начале и конце строки.
// str.repeat(n) — повторяет строку n раз.

/* МАССИВЫ */

// имеет свойство length "последний цифровой индекс плюс один " - Если мы уменьшаем length вручную, массив укорачивается.
// методы push/pop доб/уд+вернуть элемент с конца массива
// shift()/unshift() уд/доб элемент с начало массива
// виды проходов
// 1) for (let i=0; i<arr.length; i++) классика самая быстрая, во всех браузерах
// 2) for (let item of arr) проход по значениям без доступа к индексам
// 3) for in нет смысла использовать для массивов
